{"version":3,"sources":["src/Collidable.js","src/Scene.js","src/Stage.js","src/Control.js","src/Puppet.js","src/Game.js","index.js"],"names":["Collidable","tag","solid","classList","contains","platform","offsetLeft","offsetTop","offsetWidth","offsetHeight","Scene","document","querySelector","_scroll_x","scroll_x_start","collisionMap","querySelectorAll","forEach","object","push","scroll","x","style","left","y","top","clientWidth","clientHeight","Stage","Control","key","keys","up","right","bottom","addEventListener","e","translateKeyboard","size","tile","source","w","h","target","tiles","canvas","Number","prototype","inRange","a","b","n","Puppet","speedY","console","log","speedX","velocity_x","velocity_x_jump","velocity_y","down","warn","backgroundPosition","gravity","Math","abs","speed_limit_y","width","height","gameOver","collides","scroll_x","friction","direction","add","remove","lives","Game","puppet","update","ticks","thisLoop","Date","lastLoop","frameTime","thisFrameTime","filterStrength","window","clearInterval","gameInterval","error","respawnPlayer","setInterval","gameLoop","fps","play"],"mappings":"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","file":"engine.76d66bbf.js","sourceRoot":"..","sourcesContent":["class Collidable {\n\tconstructor(tag) {\n\t\tthis.tag = tag;\n\t\tthis.solid = this.tag.classList.contains('solid');\n\t\tthis.platform = this.tag.classList.contains('platform');\n\t}\n\n\tget x (){ return this.tag.offsetLeft; }\n\tget y (){ return this.tag.offsetTop; }\n\n\tget width (){ return this.tag.offsetWidth; }\n\tget height (){ return this.tag.offsetHeight; }\n}\n\nexport {Collidable as default};\n","import Collidable from './Collidable'\n\nclass Scene {\n\tconstructor() {\n\t\tthis.tag = document.querySelector('.Scene');\n\n\t\tthis._scroll_x = 0;\n\t\tthis.scroll_x_start = 0;\n\n\t\tthis.collisionMap = [];\n\t\tdocument.querySelectorAll('.Collidable').forEach((object)=>{\n\t\t\t\tthis.collisionMap.push(new Collidable(object));\n\t\t});\n\t}\n\n\tget scroll_x(){\n\t\treturn this._scroll_x;\n\t}\n\tset scroll_x(scroll){\n\t\tthis.x = -scroll;\n\t\tthis._scroll_x = scroll;\n\t}\n\tget x (){ return this.tag.offsetLeft; }\n\tget y (){ return this.tag.offsetTop; }\n\n\tget width (){ return this.tag.clientWidth; }\n\tget height (){ return this.tag.clientHeight; }\n\n\tset x (x){ this.tag.style.left = x+'px'; }\n\tset y (y){ this.tag.style.top = y+'px'; }\n\n}\n\nexport default new Scene();\n","class Stage {\n\tconstructor() {\n\t\tthis.tag = document.querySelector('.Stage');\n\t}\n\n\tget width (){ return this.tag.clientWidth; }\n\tget height (){ return this.tag.clientHeight; }\n}\nexport default new Stage();\n","class Control {\n\tconstructor(){\n\t\tthis.keys = {\n\t\t\tup: false,\n\t\t\tright: false,\n\t\t\tbottom: false,\n\t\t\tleft: false\n\t\t};\n\t\tdocument.addEventListener(\"keydown\", (e)=>{\n\t\t\tthis.keys[this.translateKeyboard(e.key)] = true;\n\t\t});\n\t\tdocument.addEventListener(\"keyup\", (e)=>{\n\t\t\tthis.keys[this.translateKeyboard(e.key)] = false;\n\t\t});\n\t}\n\n\tget up(){ return this.keys.up; }\n\tset up(key){ this.keys.up = key; }\n\tget right(){ return this.keys.right; }\n\tget bottom(){ return this.keys.bottom; }\n\tget left(){ return this.keys.left; }\n\n\ttranslateKeyboard  = (key)=>{\n\t\tif(key == \"ArrowUp\") return 'up';\n\t\tif(key == \"ArrowRight\") return 'right';\n\t\tif(key == \"ArrowDown\") return 'down';\n\t\tif(key == \"ArrowLeft\") return 'left';\n\t\treturn '';\n\t}\n}\n\nexport default new Control();\n","import Game from \"./Game\";\nimport Scene from './Scene';\nimport Stage from './Stage';\nimport Control from './Control';\n\nvar size = {\n    tile:{ // size of tiles\n        source:{w:16, h:16},\n        target:{w:32, h:32}\n    },\n    tiles:{ // number of tiles\n        target:{w:1, h:1} // this is set dynamically depending on the canvas size\n    },\n    canvas:{w:1, h:1} // the canvas size is read from the actual html\n};\nNumber.prototype.inRange = function (a, b) {\n    var n = +this;\n    return ( n >= a && n <= b );\n};\n\nclass Puppet {\n\n\tconstructor() {\n\t\tthis.tag = document.querySelector('.Puppet');\n\t\tthis.velocity_x=1.5;\n\t\tthis.velocity_x_jump=1.5;\n\t\tthis.velocity_y=25;\n\t\tthis.gravity=2;\n\t\tthis.friction=0.8;\n\t\tthis.speed_limit_y=25;\n\n\t\tthis.speedX=0;\n\t\tthis.speedY=0;\n\n\t\tthis.lives=3;\n\n\t\t// var speed = {\n\t\t//   player:{\n\t\t//     velocity_x:1.5, velocity_y:25, gravity:2, friction:0.8\n\t\t//   }\n\t\t// }\n\t\t//\n\t\t// // run\n\t\t// if (held.right) {\n\t\t//   this.speedX += speed.player.velocity_x;\n\t\t// }\n\t\t//\n\t\t// // jump\n\t\t// if (held.up) { this.speedY -= speed.player.velocity_y; }\n\t\t//\n\t\t// // apply gravity.\n\t\t// this.speedY += speed.player.gravity;\n\n\n\n\n\t\t// this.running;\n\t}\n\n\tupdate = ()=>{\n\t\tif (this.speedY == 0) {\n\t\t\tif (Control.left && this.speedY == 0) {\n\t\t\t\tconsole.log('left');\n\t\t\t\tthis.speedX -= this.velocity_x;\n\t\t\t} else if (Control.right && this.speedY == 0) {\n\t\t\t\tconsole.log('right');\n\t\t\t\tthis.speedX += this.velocity_x;\n\t\t\t}\n\t\t} else {\n\t\t\tif (Control.left) {\n\t\t\t\tconsole.log('left');\n\t\t\t\tthis.speedX -= this.velocity_x_jump;\n\t\t\t} else if (Control.right) {\n\t\t\t\tconsole.log('right2');\n\t\t\t\tthis.speedX += this.velocity_x_jump;\n\t\t\t}\n\t\t}\n\t\tif (Control.up && this.speedY == 0) {\n\t\t\t// sound_jump()\n\t\t\tthis.speedY -= this.velocity_y;\n\t\t} else if (Control.down) {\n\t\t\tconsole.warn('duck');\n\t\t\t// this only causes a duck animation, nothing happens in term of speed\n\t\t}\n\t\tControl.up = false\n\n\t\t  //function animate_actor(actor) {\n\t\t    if (this.speedX > 0) {\n\t\t        // actor.sprite.y = actor.source_size.h;\n\t\t\t\t  this.tag.style.backgroundPosition = '-209px 0';\n\t\t    } else if (this.speedX < 0) {\n\t\t        // actor.sprite.y = actor.source_size.h * 3;\n\t\t\t\t  this.tag.style.backgroundPosition = '-169px 0';\n\t\t    }\n\t\t\t //\n\t\t    if (this.speedY != 0) {\n\t\t\t\t\tif (this.speedX > 0) {\n\t\t\t\t\t\t  this.tag.style.backgroundPosition = '-208px -39px';\n\t\t  \t\t    } else if (this.speedX < 0) {\n\t\t  \t\t\t\t  this.tag.style.backgroundPosition = '-168px -39px';\n\t\t  \t\t    }\n\t\t    } else {\n\t\t    }\n\t\t    if (Control.down) {\n\t\t    //     // todo: ducken\n\t\t    }\n\t\t //}\n\n\t\t// apply gravity.\n\t\tthis.speedY += this.gravity;\n\t\t// if (Math.abs(this.speedX) < 0.8) this.speedX = 0;\n\t\tif (Math.abs(this.speedY) < 0.1) this.speedY = 0;\n\n\t\t// apply speed limit when falling down\n\t\tif (this.speedY > this.speed_limit_y) {\n\t\t\tthis.speedY = this.speed_limit_y;\n\t\t}\n\n\n\t\tthis.x += this.speedX;\n\t\tthis.y += this.speedY;\n\n\t\t// block on level edge\n\t\tif (this.x < 0) {\n\t\t\tthis.x = 0;\n\t\t} else if (this.x + this.width > Scene.width) {\n\t\t\tthis.x = Scene.width - this.width;\n\t\t}\n\t\t// die on level bottom\n\t\t// console.warn(this.y, Stage.height)\n\t\tif (this.y > Stage.height) {\n\t\t\tGame.gameOver();\n\t\t}\n\n\t\t// add visible items + actors to collision check\n\t\t// todo: only add visible items\n\t\tScene.collisionMap.forEach((object)=>{\n\n\n\t\t\tvar collides = {top:false, bottom:false, left:false, right:false};\n\t\t\t// we are below or above an object (use the middle of the actor, with tolerance)\n\t\t\tif ((this.x + this.width / 2).inRange(object.x - 0.25, object.x + object.width + 1.25)) {\n\t\t\t// if ((this.x + this.width / 2).inRange(object.x - 0.25 * size.tile.target.w, object.x + 1.25 * size.tile.target.w)) {\n\t\t\t\t// check bounce bottom:\n\t\t\t\t// if ((this.y + this.height).inRange(object.y, object.y + size.tile.target.h - 1) && this.y < object.y) {\n\n\t\t\t\tif ((this.y + this.height).inRange(object.y, object.y + object.height - 1) && this.y < object.y) {\n\t\t\t\t\tcollides.bottom = true;\n\t\t\t\t// check bounce top:\n\t\t\t\t// } else if (this.y.inRange(object.y, object.y + size.tile.target.h)) {\n\t\t\t\t} else if (this.y.inRange(object.y, object.y + object.height)) {\n\t\t\t\t\tcollides.top = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// we are right or left of an object\n\t\t\t// if ((this.y + this.height / 2).inRange(object.y - 0.25 * size.tile.target.h, object.y + 1.25 * size.tile.target.h)) {\n\t\t\tif ((this.y + this.height / 2).inRange(object.y - 0.25, object.y + object.height + 1.25)) {\n\t\t\t\t// check bounce right\n\t\t\t\t// if ((this.x + this.width).inRange(object.x, object.x + size.tile.target.w)) {\n\t\t\t\tif ((this.x + this.width).inRange(object.x, object.x + object.width)) {\n\t\t\t\t\tcollides.right = true;\n\t\t\t\t}\n\t\t\t\t// check bounce left\n\t\t\t\t// if (this.x.inRange(object.x, object.x + size.tile.target.w)) {\n\t\t\t\tif (this.x.inRange(object.x, object.x + object.width)) {\n\t\t\t\t\tcollides.left = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (object.solid) {\n             if (collides.top) {\n                 // if (object.type == 'block_coin') {\n                 //     replaceLevelSpriteXY(object.x, object.y, \"ß\");\n                 //     items.push({ sx:8, sy:9, x:object.x, y:(object.y - size.tile.target.h), type:'coin' });\n                 // } else {\n                     this.y = object.y + this.height;// + size.tile.target.h;\n                     this.speedY = 1;\n                 // }\n             } else if (collides.bottom) {\n                 // jump on enemy\n                 // if (object.type == 'enemy_mushroom') {\n                 //     object.deadly = false\n                 //     object.speed = 0\n                 //     object.sx = 2\n                 //     score++;\n                 //     sound_jump_on_enemy()\n                 // }\n                 this.y = object.y - this.height;\n                 this.speedY = 0;\n             } else if (collides.right) {\n                 this.x = object.x - this.width;\n                 this.speedX = 0;\n             } else if (collides.left) {\n                 this.x = object.x + this.width;//+ size.tile.target.w;\n                 this.speedX = 0;\n             }\n         }else if (object.platform) {\n\t\t\t\tif (collides.bottom) {\n\t\t\t\t\tif(this.speedY > 0){\n\t\t\t\t\t\tthis.y = object.y - this.height;\n\t\t\t\t\t\tthis.speedY = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n         }\n\n\t\t\t// const collides = this.checkCollision(object);\n\n\t\t    // apply collision to player movement\n\t\t    // special actions on collisions\n\t\t    // if (object.solid) {\n\t\t    //     if (collides.top) {\n\t\t    //         // if (object.type == 'block_coin') {\n\t\t    //         //     replaceLevelSpriteXY(object.x, object.y, \"ß\");\n\t\t    //         //     items.push({ sx:8, sy:9, x:object.x, y:(object.y - size.tile.target.h), type:'coin' });\n\t\t    //         // } else {\n\t\t\t\t// \t\t// if\n\t\t    //             this.y = object.y-object.height;\n\t\t    //             this.speedY = 0;\n\t\t    //         // }\n\t\t    //     } else if (collides.bottom) {\n\t\t    //         // jump on enemy\n\t\t    //         // if (object.type == 'enemy_mushroom') {\n\t\t    //         //     object.deadly = false\n\t\t    //         //     object.speed = 0\n\t\t    //         //     object.sx = 2\n\t\t    //         //     score++;\n\t\t    //         //     sound_jump_on_enemy()\n\t\t    //         // }\n\t\t\t\t// \t\tthis.y = object.y+object.height;\n\t\t\t\t// \t\tthis.speedY = 0;\n\t\t    //     } else if (collides.right) {\n\t\t    //         this.x = object.x - this.width;\n\t\t    //         this.speedX = 0;\n\t\t    //     } else if (collides.left) {\n\t\t    //         this.x = object.x + size.tile.target.w;\n\t\t    //         this.speedX = 0;\n\t\t    //     }\n\t\t    // }\n\n\t\t    // collide from any side\n\t\t    // if (collides.top || collides.bottom || collides.right || collides.left) {\n\t\t    //     if (object.deadly == true) {\n\t\t    //         //items.push({ sx:, sy:9, x:this.x, y:this.y, deadly:false, type:'looser' });\n\t\t    //         gameOver()\n\t\t    //     }\n\t\t    //     if (object.type == 'exit') {\n\t\t    //         levelWin()\n\t\t    //     }\n\t\t    //     if (object.type == 'trampoline') {\n\t\t    //         this.speedY < 0 ? this.speedY = 0 : true\n\t\t    //         sound_jump()\n\t\t    //         this.speedY = -0.5 * this.speedY - 25\n\t\t    //     }\n\t\t    //     if (object.type == 'coin') {\n\t\t    //         items.splice(items.indexOf(object), 1)\n\t\t    //         score++\n\t\t    //         sound_coin()\n\t\t    //     }\n\t\t    // }\n\t\t});\n\n\n\n\n\n\n\n\t\tconsole.log('scroll', Scene.scroll_x);\n\t  // move the player when the level is at it's border, else move the level\n\t  if (Scene.scroll_x <= 0) {\n\t\t  console.log('scroll <', Scene.scroll_x);\n\t\t  if (this.x > (Stage.width / 2)) {\n\t\t\t  Scene.scroll_x = 1;\n\t\t  }\n\t  } else if (Scene.scroll_x >= Scene.width - Stage.width && Scene.width > Stage.width) {\n\t\t  console.log('scroll >');\n\t\t  Scene.scroll_x = Scene.width - Stage.width;\n\t\t  if (this.x < Scene.width - (Stage.width / 2)) {\n\t\t\t  Scene.scroll_x = Scene.width - Stage.width - 1;\n\t\t  }\n\t  } else if (Scene.width > Stage.width) {\n\t\t  console.log('scroll =');\n\t\t  Scene.scroll_x += this.speedX;\n\t  }\n\n\t  // apply friction\n\t  this.speedX *= this.friction;\n\n\n\t  // this.x += this.speedX;\n\t  // this.y += this.speedY;\n\t  // if(this.y > Stage.height-59){\n\t  // \tthis.y = Stage.height-59;\n\t  // \tthis.speedY = 0;\n\t  // }\n\n\n\t\t// this.speedY += this.velocity_y;\n\t\t//\n\t\t// this.x += this.speedX;\n\t\t// this.y += this.speedY;\n\t\t//\n\t\t// if(this.y > Stage.height-59){\n\t\t// \tthis.y = Stage.height-59;\n\t\t// \tthis.speedY = 0;\n\t\t// }\n\t\t//\n\t\t// if(this.speedX>0){\n\t\t// \tthis.speedX -= this.velocity_x;\n\t\t// }else if(this.speedX<0){\n\t\t// \tthis.speedX += this.velocity_x;\n\t\t// }\n\t\t//\n\t\t// if(Control.right){\n\t\t// \tthis.walk();\n\t\t// }\n\t\t// if(Control.left){\n\t\t// \tthis.walkReverse();\n\t\t// }\n\t\t// if(Control.up){\n\t\t// \tthis.jump();\n\t\t// }\n\t\t// if(Control.down){\n\t\t// \tthis.lower();\n\t\t// }\n\t}\n\n\twalk = (direction)=>{\n\t\tthis.speedX += this.velocity_x;\n\t\tthis.tag.classList.add('walk');\n\t\tthis.tag.classList.remove('walk-back');\n\t}\n\twalkReverse = (direction)=>{\n\t\tthis.speedX -= this.velocity_x;\n\t\tthis.tag.classList.remove('walk');\n\t\tthis.tag.classList.add('walk-back');\n\t}\n\tjump = ()=>{\n\t\tthis.speedY -= this.velocity_y;\n\t}\n\tlower = ()=>{\n\n\t}\n\n\n\t// checkCollision = (object)=>{\n\t// \tvar collides = {top:false, bottom:false, left:false, right:false};\n\t//\n\t// \t// we are below or above an object (use the middle of the actor, with tolerance)\n\t// \tif ((this.x + this.width / 2).inRange(object.x - 0.25, object.x + 1.25 + object.width)) {\n   //      // check bounce bottom:\n   //      if ((this.y + this.height).inRange(object.y, object.y + size.tile.target.h - 1) && this.y < object.y) {\n   //          collides.bottom = true;\n   //          // check bounce top:\n   //      } else if (this.y.inRange(object.y, object.y+object.height)){// object.y + size.tile.target.h)) {\n   //          collides.top = true;\n   //      }\n\t// \t// we are right or left of an object\n\t// \t// if ((this.y + this.height / 2).inRange(object.y - 0.25 * size.tile.target.h, object.y + 1.25 * size.tile.target.h)) {\n\t// \t// \t// check bounce right\n\t// \t// \tif ((this.x + this.width).inRange(object.x, object.x + size.tile.target.w)) {\n\t// \t// \t\tcollides.right = true;\n\t// \t// \t}\n\t// \t// \t// check bounce left\n\t// \t// \tif (this.x.inRange(object.x, object.x + size.tile.target.w)) {\n\t// \t// \t\tcollides.left = true;\n\t// \t// \t}\n\t// \t// }\n\t// }\n\t// //console.log(collides);\n\t// \treturn collides;\n\t// }\n\n\n\t// todo: re-spawn player at the closest 'y' to the left\n\trespawnPlayer = ()=>{\n\t    // if (startpos = getLastLevelSpritePosition('y', this.x)) {\n\t    //     this.x = startpos.x * size.tile.target.w\n\t    //     if (this.x >= Stage.width/2) {\n\t    //         Scene.scroll_x = startpos.x * size.tile.target.w - Stage.width/2\n\t    //     } else {\n\t    //         Scene.scroll_x = 0\n\t    //     }\n\t    //     this.y = (startpos.y + line_offset_y) * size.tile.target.h\n\t    // } else {\n\t        this.x = 2 * size.tile.target.w\n\t        this.y = 5 * size.tile.target.h\n\t        Scene.scroll_x = 0\n\t    // }\n\t    this.speedX = 0\n\t    this.speedY = 0\n\t}\n\n\n\tget x (){ return this.tag.offsetLeft; }\n\tset x (x){ this.tag.style.left = x + 'px'; }\n\n\tget y (){ return this.tag.offsetTop; }\n\tset y (y){ this.tag.style.top = y + 'px'; }\n\n\tget width (){ return this.tag.offsetWidth; }\n\tget height (){ return this.tag.offsetHeight; }\n}\n\nexport {Puppet as default};\n","import Puppet from './Puppet';\n\nclass Game {\n\tconstructor(){\n\t\tthis.puppet = new Puppet(this);\n\n\t\tthis.ticks = 0;\n\n\t\tthis.fps = 30;\n\n\t\t// fps measurement\n\t\tthis.filterStrength = 20;\n\t\tthis.frameTime = 0;\n\t\tthis.lastLoop = new Date\n\t\tthis.thisLoop;\n\t}\n\n\tgameLoop = ()=>{\n\t\tthis.puppet.update();\n\n\t\tthis.ticks++;\n\t\tlet thisFrameTime = (this.thisLoop = new Date) - this.lastLoop;\n\t\tthis.frameTime += (this.thisFrameTime - this.frameTime) / this.filterStrength;\n\t\tthis.lastLoop = this.thisLoop;\n\n\t\t// console.log('fps: '+thisFrameTime);\n\t\t// drawLevel();\n\t\t// updateCharacters();\n\t\t// updateElements();\n\t\t// drawElements();\n\t\t// drawActors();\n\t\t// drawControls();\n\t}\n\n\tnewGame = ()=>{\n\t    window.clearInterval(this.gameInterval);\n\t    // hideMenus()\n\t    // hideControls()\n\t    // // draw initial level for menu background\n\t    // load_level()\n\t    // showStartMenu()\n\t}\n\n\tgameOver = ()=>{\n\t\tconsole.error('dead');\n\t\t// sound_dead()\n\t\tif (--this.puppet.lives > 0) {\n\t\t\tthis.puppet.respawnPlayer()\n\t\t} else {\n\t\t// todo: dying animation\n\t\t// actors = []\n\t\t\t//showGameOver()\n\t\t}\n\t}\n\n\tplay = ()=>{\n\t    // hideMenus();\n\t    // registerControls()\n\t    // initializeLevel()\n\t    // initializeTheme()\n\t    // sound_theme()\n\t    window.clearInterval(this.gameInterval);\n\t    this.gameInterval = setInterval(this.gameLoop, 1000 / this.fps);\n\t}\n\n\trestart = ()=>{\n\t    window.clearInterval(this.gameInterval);\n\t    // initGame()\n\t    // startGame()\n\t}\n}\n\nexport default new Game();\n\n\n\n\n\n\n/* 'use strict'\n\nconst speedX = 9;\nconst speedY = 0;\nconst gravity = 0.60;\nlet gravitySpeed = 0;\n\nconst stage = new Stage();\nconst scene = new Scene();\nconst puppet = new Puppet();\n\nlet isPaused = false;\nlet keys = [];\n\nsetInterval(function(){\n\tpuppet.gravity();\n\n\tif (keys.includes(\"ArrowLeft\")) {\n\t\tpuppet.goBack();\n\t}\n\tif (keys.includes(\"ArrowUp\")) {\n\t\tpuppet.jump();\n\t}\n\tif (keys.includes(\"ArrowRight\")) {\n\t\tpuppet.goAhead();\n\t}\n\tif (keys.includes(\"ArrowDown\")) {\n\t\tpuppet.dive();\n\t}\n}, 20);\n\ndocument.addEventListener(\"keydown\", function(e){\n\tif(keys.indexOf(e.key) == -1){\n\t\tkeys.push(e.key);\n\t}\n});\ndocument.addEventListener(\"keyup\", function(e){\n\tkeys.splice(keys.indexOf(e.key), 1);\n});*/\n","import Game from './src/Game';\n\nGame.play();\n"]}