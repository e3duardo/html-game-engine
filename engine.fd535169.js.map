{"version":3,"sources":["engine/Game.js","engine/Stage.js","engine/Puppet.js","mario/src/Mario.js","engine/ControlBase.js","mario/src/Control.js","engine/Collidable.js","mario/src/Enemy/TurtleShell.js","mario/src/Enemy/Turtle.js","engine/CollidableFactoryBase.js","mario/src/CollidableFactory.js","engine/SceneBase.js","mario/src/Stage/YoshisIsland2.js","mario/src/SuperMarioWorld.js","index.js"],"names":["Game","scene","puppet","control","collidableFactory","update","updatableMap","forEach","object","ticks","thisLoop","Date","lastLoop","frameTime","thisFrameTime","filterStrength","window","clearInterval","gameInterval","lives","respawnPlayer","document","querySelector","style","display","setInterval","gameLoop","fps","Stage","tag","clientWidth","clientHeight","size","tile","source","w","h","target","tiles","canvas","Number","prototype","inRange","a","b","n","Puppet","game","classe","classList","ax","x","ay","y","shift","velocity_x","velocity_x_jump","right","left","speedX","animation","up","down","speedY","jump","gravity","Math","abs","speed_limit_y","width","height","gameOver","collisionMap","collides","collide","scroll_x","line_to_scroll","friction","releaseA","velocity_y","newGame","setTimeout","play","_speedX","offsetLeft","parseFloat","toFixed","offsetTop","top","speedx","offsetWidth","offsetHeight","Mario","ControlBase","key","keys","addEventListener","e","repeat","translateKeyboard","Control","Collidable","from","border","bottom","horizontal","solid","contains","platform","elastic","deadly","TurtleShell","parentNode","removeChild","die","sceneMap","speed_limit_x","updatable","Turtle","CollidableFactoryBase","CollidableFactory","SceneBase","_scroll_x","scroll_x_start","querySelectorAll","push","scroll","parseInt","YoshisIsland2","SuperMarioWord","mario","inject"],"mappings":"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","file":"engine.fd535169.js","sourceRoot":"..","sourcesContent":["class Game {\n\tconstructor(){\n\t\tthis.scene;\n\t\tthis.puppet;\n\t\tthis.control;\n\t\tthis.collidableFactory;\n\n\t\tthis.ticks = 0;\n\t\tthis.fps = 30;\n\n\t\t// fps measurement\n\t\tthis.filterStrength = 20;\n\t\tthis.frameTime = 0;\n\t\tthis.lastLoop = new Date\n\t\tthis.thisLoop;\n\t}\n\n\tinject = (scene, puppet, control, collidableFactory)=>{\n\t\tthis.scene = scene;\n\t\tthis.puppet = puppet;\n\t\tthis.control = control;\n\t\tthis.collidableFactory = collidableFactory;\n\t}\n\n\tgameLoop = ()=>{\n\t\tthis.puppet.update();\n\n\t\tthis.scene.updatableMap.forEach((object)=>{\n\t\t\tobject.update();\n\t\t});\n\n\t\tthis.ticks++;\n\t\tlet thisFrameTime = (this.thisLoop = new Date) - this.lastLoop;\n\t\tthis.frameTime += (this.thisFrameTime - this.frameTime) / this.filterStrength;\n\t\tthis.lastLoop = this.thisLoop;\n\n\t\t// console.log('fps: '+thisFrameTime);\n\t\t// drawLevel();\n\t\t// updateCharacters();\n\t\t// updateElements();\n\t\t// drawElements();\n\t\t// drawActors();\n\t\t// drawControls();\n\t}\n\n\tnewGame = ()=>{\n\t    window.clearInterval(this.gameInterval);\n\t    // hideMenus()\n\t    // hideControls()\n\t    // // draw initial level for menu background\n\t    // load_level()\n\t    // showStartMenu()\n\t}\n\n\tgameOver = ()=>{\n\t\t//meu\n\t\t// sound_dead()\n\t\tif (--this.puppet.lives > 0) {\n\t\t\tthis.puppet.respawnPlayer()\n\t\t} else {\n\t\t\tdocument.querySelector('.GameOver').style.display=\"flex\";\n\t\t// todo: dying animation\n\t\t// actors = []\n\t\t\t//showGameOver()\n\t\t}\n\t}\n\n\tplay = ()=>{\n\t    // hideMenus();\n\t    // registerControls()\n\t    // initializeLevel()\n\t    // initializeTheme()\n\t    // sound_theme()\n\t    window.clearInterval(this.gameInterval);\n\t    this.gameInterval = setInterval(this.gameLoop, 1000 / this.fps);\n\t}\n\n\trestart = ()=>{\n\t    window.clearInterval(this.gameInterval);\n\t    // initGame()\n\t    // startGame()\n\t}\n}\n\nexport default Game;\n","class Stage {\n\tconstructor() {\n\t\tthis.tag = document.querySelector('.Stage');\n\t}\n\n\tget width (){ return this.tag.clientWidth; }\n\tget height (){ return this.tag.clientHeight; }\n}\nexport default new Stage();\n","import Stage from './Stage';\n\nvar size = {\n    tile:{ // size of tiles\n        source:{w:16, h:16},\n        target:{w:32, h:32}\n    },\n    tiles:{ // number of tiles\n        target:{w:1, h:1} // this is set dynamically depending on the canvas size\n    },\n    canvas:{w:1, h:1} // the canvas size is read from the actual html\n};\nNumber.prototype.inRange = function (a, b) {\n    var n = +this;\n    return ( n >= a && n <= b );\n};\n\nclass Puppet {\n\n\tconstructor(game) {\n\t\tthis.game = game;\n\n\t\tthis.tag = document.querySelector('.Puppet');\n\t\tthis.ax=0;\n\t\tthis.ay=0;\n\t\tthis.velocity_x=1;\n\t\tthis.velocity_x_jump=1.2;\n\t\tthis.velocity_y=22;\n\t\tthis.friction=0.8;\n\t\tthis.speed_limit_y=10;\n\n\t\tthis._speedX=0;\n\t\tthis.speedY=0;\n\n\t\tthis.lives=3;\n\n\t\tthis.animation('right');\n\t}\n\n\tanimation = (classe)=>{\n\t\tthis.tag.classList = \"Puppet \"+classe;\n\t}\n\tupdate = ()=>{\n\t\tthis.ax = this.x;\n\t\tthis.ay = this.y;\n\n\t\tif(this.game.control.shift){\n\t\t\tthis.velocity_x=2;\n\t\t\tthis.velocity_x_jump=2.2;\n\t\t}else{\n\t\t\tthis.velocity_x=1;\n\t\t\tthis.velocity_x_jump=1.2;\n\t\t}\n\n\t\t// this.tag.style.backgroundPosition = \"-209px 0\";\n\n\t\tif(!this.game.control.right && !this.game.control.left){\n\t\t\tif (this.speedX < 0) {\n\t\t\t\tthis.animation('left');\n\t\t\t}else{\n\t\t\t\tthis.animation('right');\n\t\t\t}\n\t\t}\n\t\tif (this.game.control.up) {\n\t\t\tif (this.speedX < 0) {\n\t\t\t\tthis.animation('lookup-left');\n\t\t\t}else{\n\t\t\t\tthis.animation('lookup-right');\n\t\t\t}\n\t\t}\n\t\tif(this.game.control.down) {\n\t\t\tif (this.speedX < 0) {\n\t\t\t\tthis.animation('lower-left');\n\t\t\t}else{\n\t\t\t\tthis.animation('lower-right');\n\t\t\t}\n\t\t}\n\t\tif (this.speedY == 0) {\n\t\t\tif (this.game.control.left) {\n\t\t\t\t// if(this.speedX > 0){\n\t\t\t\t// \tconsole.warn('run with SMOKE left');\n\t\t\t\t// }else{\n\t\t\t\t// }\n\t\t\t\tthis.animation('walk-left');\n\t\t\t\tthis.speedX -= this.velocity_x;\n\t\t\t} else if (this.game.control.right) {\n\t\t\t\t// if(this.speedX < 0){\n\t\t\t\t// \tconsole.warn('run with SMOKE right');\n\t\t\t\t// }else{\n\t\t\t\t// }\n\t\t\t\tthis.animation('walk-right');\n\t\t\t\tthis.speedX += this.velocity_x;\n\t\t\t}\n\t\t}else {\n\t\t\tif (this.game.control.left) {\n\t\t\t\tthis.speedX -= this.velocity_x_jump;\n\t\t\t} else if (this.game.control.right) {\n\t\t\t\tthis.speedX += this.velocity_x_jump;\n\t\t\t}\n\t\t}\n\t\tif (this.game.control.a && this.speedY == 0) {\n\t\t\tthis.jump();\n\t\t}\n\n\t\tif(this.speedY < 0){\n\t\t\tif (this.speedX < 0) {\n\t\t\t\tthis.animation('jumping-left');\n\t\t\t}else{\n\t\t\t\tthis.animation('jumping-right');\n\t\t\t}\n\t\t}else if(this.speedY > 0){\n\t\t\tif (this.speedX < 0) {\n\t\t\t\tthis.animation('falling-left');\n\t\t\t}else{\n\t\t\t\tthis.animation('falling-right');\n\t\t\t}\n\t\t}\n\n\n\t\t// apply gravity.\n\t\tthis.speedY += this.game.scene.gravity;\n\t\tif (Math.abs(this.speedY) < 0.1) this.speedY = 0;\n\n\t\t// apply speed limit when falling down\n\t\tif (this.speedY > this.speed_limit_y) {\n\t\t\tthis.speedY = this.speed_limit_y;\n\t\t}\n\n\t\tthis.ax += this.speedX;\n\t\tthis.ay += this.speedY;\n\n\t\t// block on level edge\n\t\tif (this.ax < 0) {\n\t\t\tthis.ax = 0;\n\t\t} else if (this.ax + this.width > this.game.scene.width) {\n\t\t\tthis.ax = this.game.scene.width - this.width;\n\t\t}\n\t\t// die on level bottom\n\t\tif (this.ay > this.game.scene.height) {\n\t\t\tthis.game.gameOver();\n\t\t}\n\n\t\t// add visible items + actors to collision check\n\t\t// todo: only add visible items\n\t\tthis.game.scene.collisionMap.forEach((object)=>{\n\t\t\tconst collides = object.collides(this);\n\n\t\t\tobject.collide(this, collides);\n\n\n\t\t\t// if (object.solid) {\n            /* if (collides.top && object.border.top=='solid') {\n                 // if (object.type == 'block_coin') {\n                 //     replaceLevelSpriteXY(object.x, object.y, \"ß\");\n                 //     items.push({ sx:8, sy:9, x:object.x, y:(object.y - size.tile.target.h), type:'coin' });\n                 // } else {\n                     this.ay = object.y + this.height;// + size.tile.target.h;\n                     this.speedY = 1;\n                 // }\n             }\n\t\t\t\t if (collides.bottom && object.border.bottom=='solid') {\n                 // jump on enemy\n                 // if (object.type == 'enemy_mushroom') {\n                 //     object.deadly = false\n                 //     object.speed = 0\n                 //     object.sx = 2\n                 //     score++;\n                 //     sound_jump_on_enemy()\n                 // }\n                 this.ay = object.y - this.height;\n                 this.speedY = 0;\n             }\n\t\t\t\t if (collides.right && object.border.right=='solid') {\n                 this.ax = object.x - this.width;\n                 this.speedX = 0;\n             }\n\t\t\t\t if (collides.left && object.border.left=='solid') {\n                 this.ax = object.x + this.width;//+ size.tile.target.w;\n                 this.speedX = 0;\n             }*/\n         // }else if (object.platform) {\n\t\t\t// \tif (collides.bottom) {\n\t\t\t// \t\tif(this.speedY > 0){\n\t\t\t// \t\t\tthis.ay = object.y - this.height;\n\t\t\t// \t\t\tthis.speedY = 0;\n\t\t\t// \t\t}\n\t\t\t// \t}\n         // }\n\n\t\t\t// const collides = this.checkCollision(object);\n\n\t\t    // apply collision to player movement\n\t\t    // special actions on collisions\n\t\t    // if (object.solid) {\n\t\t    //     if (collides.top) {\n\t\t    //         // if (object.type == 'block_coin') {\n\t\t    //         //     replaceLevelSpriteXY(object.x, object.y, \"ß\");\n\t\t    //         //     items.push({ sx:8, sy:9, x:object.x, y:(object.y - size.tile.target.h), type:'coin' });\n\t\t    //         // } else {\n\t\t\t\t// \t\t// if\n\t\t    //             this.y = object.y-object.height;\n\t\t    //             this.speedY = 0;\n\t\t    //         // }\n\t\t    //     } else if (collides.bottom) {\n\t\t    //         // jump on enemy\n\t\t    //         // if (object.type == 'enemy_mushroom') {\n\t\t    //         //     object.deadly = false\n\t\t    //         //     object.speed = 0\n\t\t    //         //     object.sx = 2\n\t\t    //         //     score++;\n\t\t    //         //     sound_jump_on_enemy()\n\t\t    //         // }\n\t\t\t\t// \t\tthis.y = object.y+object.height;\n\t\t\t\t// \t\tthis.speedY = 0;\n\t\t    //     } else if (collides.right) {\n\t\t    //         this.x = object.x - this.width;\n\t\t    //         this.speedX = 0;\n\t\t    //     } else if (collides.left) {\n\t\t    //         this.x = object.x + size.tile.target.w;\n\t\t    //         this.speedX = 0;\n\t\t    //     }\n\t\t    // }\n\n\t\t   // collide from any side\n\t\t\t//if (collides.top || collides.bottom || collides.right || collides.left) {\n\n\t\t\t//\tobject.collide(this, collides);\n\n\t\t\t//\tif (object.deadly == true) {\n/*\n\n\t\t\t\t\t//items.push({ sx:, sy:9, x:this.x, y:this.y, deadly:false, type:'looser' });\n\t\t\t\t\tGame.newGame();\n\n\t\t\t\t\tif (this.speedX < 0) {\n\t\t\t\t\t\tthis.animation('dying-left');\n\t\t\t\t\t}else{\n\t\t\t\t\t\tthis.animation('dying-right');\n\t\t\t\t\t}\n\n\t\t\t\t\tsetTimeout(()=>{\n\t\t\t\t\t\tGame.gameOver();\n\t\t\t\t\t\tGame.play();\n\t\t\t\t\t}, 1000);*/\n\t\t\t//\t}\n\t\t    //     if (object.type == 'exit') {\n\t\t    //         levelWin()\n\t\t    //     }\n\t\t    //     if (object.type == 'trampoline') {\n\t\t    //         this.speedY < 0 ? this.speedY = 0 : true\n\t\t    //         sound_jump()\n\t\t    //         this.speedY = -0.5 * this.speedY - 25\n\t\t    //     }\n\t\t    //     if (object.type == 'coin') {\n\t\t    //         items.splice(items.indexOf(object), 1)\n\t\t    //         score++\n\t\t    //         sound_coin()\n\t\t    //     }\n\t\t    //}\n\t\t});\n\n\n\n\t  // move the player when the level is at it's border, else move the level\n\t  if (this.game.scene.scroll_x <= 0) {\n         if (this.ax > (Stage.width / 2)) {\n             this.game.scene.scroll_x = 1;\n         }\n     } else if (this.game.scene.scroll_x >= this.game.scene.width - Stage.width && this.game.scene.width > Stage.width) {\n         this.game.scene.scroll_x = this.game.scene.width - Stage.width;\n         if (this.ax < this.game.scene.width - (Stage.width / 2)) {\n             this.game.scene.scroll_x = this.game.scene.width - Stage.width - 1;\n         }\n     } else if (this.game.scene.width > Stage.width) {\n\t\t\tif(this.ax > this.game.scene.line_to_scroll){\n\t\t\t\tthis.game.scene.scroll_x = this.ax-this.game.scene.line_to_scroll;\n\t\t\t}\n     }\n\n\t  \t// apply friction\n\t\tthis.speedX *= this.friction;\n\n\t\tthis.x = this.ax;\n\t\tthis.y = this.ay;\n\t}\n\tjump = ()=>{\n\t\tthis.game.control.releaseA();\n\t\tthis.speedY -= this.velocity_y;\n\t}\n\tdie = ()=>{\n\t\tthis.game.newGame();\n\n\t\tif (this.speedX < 0) {\n\t\t\tthis.animation('dying-left');\n\t\t}else{\n\t\t\tthis.animation('dying-right');\n\t\t}\n\n\t\tsetTimeout(()=>{\n\t\t\tthis.game.gameOver();\n\t\t\tthis.game.play();\n\t\t}, 1000);\n\t}\n\tlower = ()=>{\n\n\t}\n\n\n\n\n\t// todo: re-spawn player at the closest 'y' to the left\n\trespawnPlayer = ()=>{\n\t    // if (startpos = getLastLevelSpritePosition('y', this.x)) {\n\t    //     this.x = startpos.x * size.tile.target.w\n\t    //     if (this.x >= Stage.width/2) {\n\t    //         Scene.scroll_x = startpos.x * size.tile.target.w - Stage.width/2\n\t    //     } else {\n\t    //         Scene.scroll_x = 0\n\t    //     }\n\t    //     this.y = (startpos.y + line_offset_y) * size.tile.target.h\n\t    // } else {\n\t\t this.speedX = 0;\n\t\t this.speedY = 0;\n\t\t this.x = 40;\n\t\t this.y = 0;\n\t\t this.game.scene.scroll_x = 0\n\t\t this.game.scene.x = 0\n\t\t this.animation('right');\n\t}\n\n\n\tget x (){ return this.tag.offsetLeft; }\n\tset x (x){\n\t\tx = parseFloat(x.toFixed(1));\n\t\tif(x != this.x){\n\t\t\t// console.log('x', x, 'velocity_x',  this.velocity_x);\n\t\t\tthis.tag.style.left = x + 'px';\n\t\t}\n\t}\n\n\tget y (){ return this.tag.offsetTop; }\n\tset y (y){\n\t\ty = parseFloat(y.toFixed(1));\n\t\tif(y != this.y){\n\t\t\t// console.log(y);\n\t\t\tthis.tag.style.top = y + 'px';\n\t\t}\n\t}\n\tget speedX (){ return this._speedX; }\n\tset speedX (speedx){ this._speedX = parseFloat(speedx.toFixed(1)); }\n\n\tget width (){ return this.tag.offsetWidth; }\n\tget height (){ return this.tag.offsetHeight; }\n}\n\nexport {Puppet as default};\n","import Puppet from '~/engine/Puppet';\n\nclass Mario extends Puppet{\n\tconstructor(game){\n\t\tsuper(game);\n\t}\n}\n\nexport default Mario;\n","class ControlBase {\n\tconstructor(game){\n\t\tthis.game = game;\n\t\tthis.keys = {\n\t\t};\n\t\tdocument.addEventListener(\"keydown\", (e)=>{\n\t\t\tif(!e.repeat){\n\t\t\t\tthis.keys[this.translateKeyboard(e.key)] = true;\n\t\t\t}\n\t\t});\n\t\tdocument.addEventListener(\"keyup\", (e)=>{\n\t\t\tif(!e.repeat){\n\t\t\t\tthis.keys[this.translateKeyboard(e.key)] = false;\n\t\t\t}\n\t\t});\n\t}\n\n\ttranslateKeyboard  = (key)=>{\n\t\treturn '';\n\t}\n}\n\nexport default ControlBase;\n","import ControlBase from '~/engine/ControlBase';\n\nclass Control extends ControlBase{\n\tconstructor(game){\n\t\tsuper(game);\n\t\tthis.keys = {\n\t\t\tup: false,\n\t\t\tright: false,\n\t\t\tdown: false,\n\t\t\tleft: false,\n\t\t\ta: false,\n\t\t\tshift: false\n\t\t};\n\t}\n\n\tget up(){ return this.keys.up; }\n\tget right(){ return this.keys.right; }\n\tget down(){ return this.keys.down; }\n\tget left(){ return this.keys.left; }\n\tget a(){ return this.keys.a; }\n\tget shift(){ return this.keys.shift; }\n\treleaseA=()=>{ this.keys.a = false;}\n\n\ttranslateKeyboard  = (key)=>{\n\t\tif(key == \"ArrowUp\") return 'up';\n\t\tif(key == \"ArrowRight\") return 'right';\n\t\tif(key == \"ArrowDown\") return 'down';\n\t\tif(key == \"ArrowLeft\") return 'left';\n\t\tif(key == \"a\" || key == \"A\" ) return 'a';\n\t\tif(key == \"Shift\" ) return 'shift';\n\t\treturn '';\n\t}\n}\n\nexport default Control;\n","class Collidable {\n\tconstructor(game, tag) {\n\t\tthis.game = game;\n\t\tthis.tag = tag;\n\t\tthis.solid = this.tag.classList.contains('solid');\n\t\tthis.platform = this.tag.classList.contains('platform');\n\t\tthis.elastic = this.tag.classList.contains('elastic');\n\t\tthis.deadly = this.tag.classList.contains('deadly');\n\n\t\tthis.border = {\n\t\t\ttop: 'solid',\n\t\t\tbottom: 'solid',\n\t\t\thorizontal: 'solid'\n\t\t}\n\t\tif(this.platform){\n\t\t\tthis.border.top='platform';\n\t\t\tthis.border.bottom=false;\n\t\t\tthis.border.horizontal=false;\n\t\t}\n\t}\n\n\tcollide = (from, collides)=>{\n\t\tif (collides.top && this.border.bottom=='solid') {\n\t\t\t  from.ay = this.y + from.height;// + size.tile.target.h;\n\t\t\t  from.speedY = 1;\n\t\t}\n\t\tif (collides.bottom){\n\t\t\tif(this.border.top=='solid') {\n\t\t\t\tfrom.ay = this.y - from.height;\n\t\t\t\tfrom.speedY = 0;\n\t\t\t}else if(this.border.top=='platform') {\n\t\t\t\tif(from.speedY > 0){\n\t\t\t\t\tfrom.ay = this.y - from.height;\n\t\t\t\t\tfrom.speedY = 0;\n\t\t\t \t}\n\t\t \t}\n\t\t}\n\t\tif (collides.right && this.border.horizontal=='solid' && from.speedX > 0) {\n\t\t\tif(from.border && from.border.horizontal=='elastic') {\n\t\t\t\tfrom.speedX *= -1;\n\t\t\t}else{\n\t\t\t\tfrom.ax = this.x - from.width;\n\t\t\t\tfrom.speedX = 0;\n\t\t\t}\n\t\t}\n\t\tif (collides.left && this.border.horizontal=='solid' && from.speedX < 0) {\n\t\t\tif(from.border && from.border.horizontal=='elastic') {\n\t\t\t\tfrom.speedX *= -1;\n\t\t\t}else{\n\t\t\t\tfrom.ax = this.x + this.width;\n\t\t\t\tfrom.speedX = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tcollides = (from)=>{\n\t\tlet collides = {top:false, bottom:false, left:false, right:false};\n\t\t// we are below or above an object (use the middle of the actor, with tolerance)\n\t\tif ((from.ax + from.width / 2).inRange(this.x - 0.25, this.x + this.width + 1.25)) {\n\t\t\t// check bounce bottom:\n\t\t\tif ((from.ay + from.height).inRange(this.y, this.y + this.height - 1) && from.ay < this.y) {\n\t\t\t\tcollides.bottom = true;\n\t\t\t// check bounce top:\n\t\t\t} else if (from.ay.inRange(this.y, this.y + this.height)) {\n\t\t\t\tcollides.top = true;\n\t\t\t}\n\t\t}\n\t\t// we are right or left of an object\n\t\tif ((from.ay + from.height / 2).inRange(this.y - 0.25, this.y + this.height + 1.25)) {\n\t\t\t// check bounce right\n\t\t\tif ((from.ax + from.width).inRange(this.x, this.x + this.width)) {\n\t\t\t\tcollides.right = true;\n\t\t\t}\n\t\t\t// check bounce left\n\t\t\tif (from.ax.inRange(this.x, this.x + this.width)) {// + this.width)) {\n\t\t\t\tcollides.left = true;\n\t\t\t}\n\t\t}\n\t\treturn collides;\n\t}\n\n\tget x (){ return this.tag.offsetLeft; }\n\tset x (x){ this.tag.style.left = x +'px'; }\n\tget y (){ return this.tag.offsetTop; }\n\tset y (y){ this.tag.style.top = y +'px'; }\n\n\tget width (){ return this.tag.offsetWidth; }\n\tget height (){ return this.tag.offsetHeight; }\n}\n\nexport {Collidable as default};\n","import Collidable from '~/engine/Collidable';\n\nclass TurtleShell extends Collidable{\n\tconstructor(game, tag) {\n\t\tsuper(game, tag);\n\n\t\tthis.ax=0;\n\t\tthis.ay=0;\n\t\tthis.speedX=0;\n\t\tthis.speedY=0;\n\t\tthis.velocity_x=1;\n\t\tthis.speed_limit_x=10;\n\t\tthis.friction=0.8;\n\n\t\tthis.updatable = true;\n\t\tthis.border.horizontal='elastic';\n\t}\n\n\tcollide = (from, collides)=>{\n\t\t// TODO: implementar algoritmo de elasticidade\n\t\tif(collides.bottom){\n\t\t\tfrom.jump();\n\t\t\tsetTimeout(()=>{\n\t\t\t\tthis.tag.parentNode.removeChild(this.tag)\n\t\t\t},100)\n\t\t}\n\n\t\tif(collides.right || collides.left){\n\t\t\tif(from.speedX > 0.2)\n\t\t\t\tthis.speedX += this.velocity_x;\n\t\t\telse if(from.speedX < -0.2)\n\t\t\t\tthis.speedX -= this.velocity_x;\n\t\t\telse\n\t\t\t\tfrom.die();\n\t\t\t\t//console.error('dead');\n\t\t}\n\t}\n\n\tupdate = ()=>{\n\t\tthis.ax = this.x;\n\t\tthis.ay = this.y;\n\n\t\t// apply gravity.\n\t\tthis.speedY += this.game.scene.gravity;\n\t\tif (Math.abs(this.speedY) < 0.1) this.speedY = 0;\n\n\t\t// apply speed limit when falling down\n\t\tif (this.speedY > this.speed_limit_y) {\n\t\t\tthis.speedY = this.speed_limit_y;\n\t\t}\n\n\t\tthis.ax += this.speedX;\n\t\tthis.ay += this.speedY;\n\n\t\tthis.game.scene.sceneMap.forEach((object)=>{\n\t\t\tconst collides = object.collides(this);\n\t\t\tobject.collide(this, collides);\n\t\t});\n\t  \t// apply friction\n\t\t// this.speedX *= this.friction;\n\n\t\tthis.x = this.ax;\n\t\tthis.y = this.ay;\n\t}\n}\n\nexport {TurtleShell as default};\n","import Collidable from '~/engine/Collidable';\n\nclass Turtle extends Collidable{\n\tconstructor(game, tag) {\n\t\tsuper(game, tag);\n\n\t\tthis.border = {\n\t\t\ttop: 'solid',\n\t\t\tright: 'deadly',\n\t\t\tbottom: 'deadly',\n\t\t\tleft: 'deadly'\n\t\t}\n\t}\n\n\tcollide = (from, collides)=>{\n\t\t// TODO: implementar algoritmo de elasticidade\n\t\tif(collides.bottom){\n\t\t\tfrom.jump();\n\t\t\tsetTimeout(()=>{\n\t\t\t\tthis.tag.parentNode.removeChild(this.tag)\n\t\t\t},100)\n\t\t}else if(collides.right || collides.left){\n\t\t\tfrom.die();\n\t\t}\n\t}\n}\n\nexport {Turtle as default};\n","import Collidable from './Collidable';\n\nclass CollidableFactoryBase {\n\tconstructor(game){\n\t\tthis.game = game;\n\t}\n\n\tfrom(tag){\n\t\treturn new Collidable(this.game, tag);\n\t}\n}\n\nexport {CollidableFactoryBase as default};\n","import TurtleShell from './Enemy/TurtleShell';\nimport Turtle from './Enemy/Turtle';\nimport CollidableFactoryBase from '~/engine/CollidableFactoryBase';\n\nclass CollidableFactory extends CollidableFactoryBase{\n\tconstructor(game){\n\t\tsuper(game);\n\t}\n\n\tfrom(tag){\n\t\tif(tag.classList.contains('TurtleShell')){\n\t\t\treturn new TurtleShell(this.game, tag);\n\t\t}\n\t\tif(tag.classList.contains('Turtle')){\n\t\t\treturn new Turtle(this.game, tag);\n\t\t}\n\t\treturn super.from(tag);\n\t}\n}\n\nexport {CollidableFactory as default};\n","class SceneBase {\n\tconstructor(collidableFactory) {\n\t\t// this.game = game;\n\t\tthis.tag = document.querySelector('.Scene');\n\n\t\tthis.gravity=3;\n\n\t\tthis.line_to_scroll = 128;\n\t\tthis._scroll_x = 0;\n\t\tthis.scroll_x_start = 0;\n\n\t\tthis.collisionMap = [];\n\t\tthis.updatableMap = [];\n\t\tthis.sceneMap = [];\n\t\tdocument.querySelectorAll('.Collidable').forEach((object)=>{\n\t\t\tobject = collidableFactory.from(object);\n\t\t\tthis.collisionMap.push(object);\n\t\t\tif(object.updatable){\n\t\t\t\tthis.updatableMap.push(object);\n\t\t\t}\n\t\t\tif(object.solid || object.platform){\n\t\t\t\tthis.sceneMap.push(object);\n\t\t\t}\n\t\t});\n\t}\n\n\tget scroll_x(){\n\t\treturn this._scroll_x;\n\t}\n\tset scroll_x(scroll){\n\t\tthis.x = -scroll;\n\t\tthis._scroll_x = scroll;\n\t}\n\n\tget width (){ return this.tag.clientWidth; }\n\tget height (){ return this.tag.clientHeight; }\n\n\tget x (){ return this.tag.offsetLeft; }\n\tset x (x){\n\t\tx = parseInt(x);\n\t\tif(x != this.x){\n\t\t\tthis.tag.style.left = x + 'px';\n\t\t}\n\t}\n\n\tget y (){ return this.tag.offsetTop; }\n\tset y (y){\n\t\ty = parseInt(y);\n\t\tif(y != this.y){\n\t\t\tthis.tag.style.top = y + 'px';\n\t\t}\n\t}\n\n}\n\nexport default SceneBase;\n","import SceneBase from '~/engine/SceneBase';\n\nclass YoshisIsland2 extends SceneBase {\n\tconstructor(collidableFactory) {\n\t\tsuper(collidableFactory);\n\t}\n}\n\nexport default YoshisIsland2;\n","import Game from '~/engine/Game';\n\nimport Mario from './Mario';\nimport Control from './Control';\nimport CollidableFactory from './CollidableFactory';\nimport YoshisIsland2 from './Stage/YoshisIsland2';\n\nclass SuperMarioWord extends Game {\n\tconstructor(){\n\t\tsuper();\n\t\tconst mario = new Mario(this);\n\t\tconst collidableFactory = new CollidableFactory(this);\n\t\tconst scene = new YoshisIsland2(collidableFactory);\n\t\tconst control = new Control(this);\n\n\t\tthis.inject(scene, mario, control, collidableFactory);\n\t}\n}\n\nexport default new SuperMarioWord();\n","import SuperMarioWord from './mario/src/SuperMarioWorld';\n\n//\n\n\ndocument.querySelector('.Stage').addEventListener('click', ()=>{\n\tSuperMarioWord.play();\n});\n"]}