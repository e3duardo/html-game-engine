{"version":3,"sources":["src/Control.js","src/Collidable.js","src/Enemy/TurtleShell.js","src/Enemy/Turtle.js","src/CollidableFactory.js","src/Scene.js","src/Stage.js","src/Puppet.js","src/Game.js","index.js"],"names":["document","addEventListener","e","Control","console","log","keys","a","key","up","right","down","left","shift","repeat","translateKeyboard","Collidable","tag","from","collides","top","border","bottom","ay","y","height","speedY","horizontal","speedX","ax","x","width","inRange","solid","classList","contains","platform","elastic","deadly","offsetLeft","style","offsetTop","offsetWidth","offsetHeight","TurtleShell","jump","setTimeout","parentNode","removeChild","velocity_x","die","Scene","gravity","Math","abs","speed_limit_y","sceneMap","forEach","object","collide","speed_limit_x","friction","updatable","Turtle","CollidableFactory","querySelector","line_to_scroll","_scroll_x","scroll_x_start","collisionMap","updatableMap","querySelectorAll","push","scroll","clientWidth","clientHeight","parseInt","Stage","size","tile","source","w","h","target","tiles","canvas","Number","prototype","b","n","Puppet","classe","velocity_x_jump","animation","gameOver","scroll_x","releaseA","velocity_y","newGame","play","_speedX","lives","parseFloat","toFixed","speedx","Game","puppet","update","ticks","thisLoop","Date","lastLoop","frameTime","thisFrameTime","filterStrength","window","clearInterval","gameInterval","error","respawnPlayer","display","setInterval","gameLoop","fps"],"mappings":"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","file":"engine.da27ec56.js","sourceRoot":"..","sourcesContent":["document.addEventListener(\"keydown\", (e)=>{\n}, false);\n\n\nclass Control {\n\tconstructor(){\n\t\tthis.keys = {\n\t\t\tup: false,\n\t\t\tright: false,\n\t\t\tdown: false,\n\t\t\tleft: false,\n\t\t\ta: false,\n\t\t\tshift: false\n\t\t};\n\t\tdocument.addEventListener(\"keydown\", (e)=>{\n\t\t\tif(!e.repeat){\n\t\t\t\tthis.keys[this.translateKeyboard(e.key)] = true;\n\t\t\t}\n\t\t});\n\t\tdocument.addEventListener(\"keyup\", (e)=>{\n\t\t\tif(!e.repeat){\n\t\t\t\tthis.keys[this.translateKeyboard(e.key)] = false;\n\t\t\t}\n\t\t});\n\t}\n\n\tget up(){ return this.keys.up; }\n\tget right(){ return this.keys.right; }\n\tget down(){ return this.keys.down; }\n\tget left(){ return this.keys.left; }\n\tget a(){ return this.keys.a; }\n\tget shift(){ return this.keys.shift; }\n\treleaseA=()=>{ console.log(this.keys.a, '<'); this.keys.a = false;}\n\n\ttranslateKeyboard  = (key)=>{\n\t\tif(key == \"ArrowUp\") return 'up';\n\t\tif(key == \"ArrowRight\") return 'right';\n\t\tif(key == \"ArrowDown\") return 'down';\n\t\tif(key == \"ArrowLeft\") return 'left';\n\t\tif(key == \"a\" || key == \"A\" ) return 'a';\n\t\tif(key == \"Shift\" ) return 'shift';\n\t\treturn '';\n\t}\n}\n\nexport default new Control();\n","class Collidable {\n\tconstructor(tag) {\n\t\tthis.tag = tag;\n\t\tthis.solid = this.tag.classList.contains('solid');\n\t\tthis.platform = this.tag.classList.contains('platform');\n\t\tthis.elastic = this.tag.classList.contains('elastic');\n\t\tthis.deadly = this.tag.classList.contains('deadly');\n\n\t\tthis.border = {\n\t\t\ttop: 'solid',\n\t\t\tbottom: 'solid',\n\t\t\thorizontal: 'solid'\n\t\t}\n\t\tif(this.platform){\n\t\t\tthis.border.top='platform';\n\t\t\tthis.border.bottom=false;\n\t\t\tthis.border.horizontal=false;\n\t\t}\n\t}\n\n\tcollide = (from, collides)=>{\n\t\tif (collides.top && this.border.bottom=='solid') {\n\t\t\t  from.ay = this.y + from.height;// + size.tile.target.h;\n\t\t\t  from.speedY = 1;\n\t\t}\n\t\tif (collides.bottom){\n\t\t\tif(this.border.top=='solid') {\n\t\t\t\tfrom.ay = this.y - from.height;\n\t\t\t\tfrom.speedY = 0;\n\t\t\t}else if(this.border.top=='platform') {\n\t\t\t\tif(from.speedY > 0){\n\t\t\t\t\tfrom.ay = this.y - from.height;\n\t\t\t\t\tfrom.speedY = 0;\n\t\t\t \t}\n\t\t \t}\n\t\t}\n\t\tif (collides.right && this.border.horizontal=='solid' && from.speedX > 0) {\n\t\t\tif(from.border && from.border.horizontal=='elastic') {\n\t\t\t\tfrom.speedX *= -1;\n\t\t\t\tconsole.log('teste1');\n\t\t\t}else{\n\t\t\t\tfrom.ax = this.x - from.width;\n\t\t\t\tfrom.speedX = 0;\n\t\t\t}\n\t\t}\n\t\tif (collides.left && this.border.horizontal=='solid' && from.speedX < 0) {\n\t\t\tif(from.border && from.border.horizontal=='elastic') {\n\t\t\t\tfrom.speedX *= -1;\n\t\t\t\tconsole.log('teste2');\n\t\t\t}else{\n\t\t\t\tfrom.ax = this.x + this.width;\n\t\t\t\tfrom.speedX = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tcollides = (from)=>{\n\t\tlet collides = {top:false, bottom:false, left:false, right:false};\n\t\t// we are below or above an object (use the middle of the actor, with tolerance)\n\t\tif ((from.ax + from.width / 2).inRange(this.x - 0.25, this.x + this.width + 1.25)) {\n\t\t\t// check bounce bottom:\n\t\t\tif ((from.ay + from.height).inRange(this.y, this.y + this.height - 1) && from.ay < this.y) {\n\t\t\t\tcollides.bottom = true;\n\t\t\t// check bounce top:\n\t\t\t} else if (from.ay.inRange(this.y, this.y + this.height)) {\n\t\t\t\tcollides.top = true;\n\t\t\t}\n\t\t}\n\t\t// we are right or left of an object\n\t\tif ((from.ay + from.height / 2).inRange(this.y - 0.25, this.y + this.height + 1.25)) {\n\t\t\t// check bounce right\n\t\t\tif ((from.ax + from.width).inRange(this.x, this.x + this.width)) {\n\t\t\t\tcollides.right = true;\n\t\t\t}\n\t\t\t// check bounce left\n\t\t\tif (from.ax.inRange(this.x, this.x + this.width)) {// + this.width)) {\n\t\t\t\tcollides.left = true;\n\t\t\t}\n\t\t}\n\t\treturn collides;\n\t}\n\n\tget x (){ return this.tag.offsetLeft; }\n\tset x (x){ this.tag.style.left = x +'px'; }\n\tget y (){ return this.tag.offsetTop; }\n\tset y (y){ this.tag.style.top = y +'px'; }\n\n\tget width (){ return this.tag.offsetWidth; }\n\tget height (){ return this.tag.offsetHeight; }\n}\n\nexport {Collidable as default};\n","import Scene from '../Scene';\nimport Control from '../Control';\nimport Collidable from '../Collidable';\n\nclass TurtleShell extends Collidable{\n\tconstructor(tag) {\n\t\tsuper(tag);\n\n\t\tthis.ax=0;\n\t\tthis.ay=0;\n\t\tthis.speedX=0;\n\t\tthis.speedY=0;\n\t\tthis.velocity_x=1;\n\t\tthis.speed_limit_x=10;\n\t\tthis.friction=0.8;\n\n\t\tthis.updatable = true;\n\t\tthis.border.horizontal='elastic';\n\t}\n\n\tcollide = (from, collides)=>{\n\t\t// TODO: implementar algoritmo de elasticidade\n\t\tif(collides.bottom){\n\t\t\tfrom.jump();\n\t\t\tsetTimeout(()=>{\n\t\t\t\tthis.tag.parentNode.removeChild(this.tag)\n\t\t\t},100)\n\t\t}\n\n\t\tif(collides.right || collides.left){\n\t\t\tif(from.speedX > 0.2)\n\t\t\t\tthis.speedX += this.velocity_x;\n\t\t\telse if(from.speedX < -0.2)\n\t\t\t\tthis.speedX -= this.velocity_x;\n\t\t\telse\n\t\t\t\tfrom.die();\n\t\t\t\t//console.error('dead');\n\t\t}\n\t}\n\n\tupdate = ()=>{\n\t\tthis.ax = this.x;\n\t\tthis.ay = this.y;\n\n\t\t// apply gravity.\n\t\tthis.speedY += Scene.gravity;\n\t\tif (Math.abs(this.speedY) < 0.1) this.speedY = 0;\n\n\t\t// apply speed limit when falling down\n\t\tif (this.speedY > this.speed_limit_y) {\n\t\t\tthis.speedY = this.speed_limit_y;\n\t\t}\n\n\t\tthis.ax += this.speedX;\n\t\tthis.ay += this.speedY;\n\n\t\tScene.sceneMap.forEach((object)=>{\n\t\t\tconst collides = object.collides(this);\n\t\t\tobject.collide(this, collides);\n\t\t});\n\t  \t// apply friction\n\t\t// this.speedX *= this.friction;\n\n\t\tthis.x = this.ax;\n\t\tthis.y = this.ay;\n\t}\n}\n\nexport {TurtleShell as default};\n","import Collidable from '../Collidable';\n\nclass Turtle extends Collidable{\n\tconstructor(tag) {\n\t\tsuper(tag);\n\t\tconsole.log('turtle');\n\n\t\tthis.border = {\n\t\t\ttop: 'solid',\n\t\t\tright: 'deadly',\n\t\t\tbottom: 'deadly',\n\t\t\tleft: 'deadly'\n\t\t}\n\t}\n\n\tcollide = (from, collides)=>{\n\t\t// TODO: implementar algoritmo de elasticidade\n\t\tif(collides.bottom){\n\t\t\tfrom.jump();\n\t\t\tsetTimeout(()=>{\n\t\t\t\tthis.tag.parentNode.removeChild(this.tag)\n\t\t\t},100)\n\t\t}else if(collides.right || collides.left){\n\t\t\tfrom.die();\n\t\t}\n\t}\n}\n\nexport {Turtle as default};\n","import TurtleShell from './Enemy/TurtleShell';\nimport Turtle from './Enemy/Turtle';\nimport Collidable from './Collidable';\n\nclass CollidableFactory {\n\tconstructor(){\n\t\tthrow 'not supposed to be instantiated';\n\t}\n\tstatic from(tag){\n\t\tif(tag.classList.contains('TurtleShell')){\n\t\t\treturn new TurtleShell(tag);\n\t\t}\n\t\tif(tag.classList.contains('Turtle')){\n\t\t\treturn new Turtle(tag);\n\t\t}\n\t\treturn new Collidable(tag);\n\t}\n}\n\nexport {CollidableFactory as default};\n","import CollidableFactory from './CollidableFactory'\n\nclass Scene {\n\tconstructor() {\n\t\tthis.tag = document.querySelector('.Scene');\n\n\t\tthis.gravity=3;\n\t\t\n\t\tthis.line_to_scroll = 128;\n\t\tthis._scroll_x = 0;\n\t\tthis.scroll_x_start = 0;\n\n\t\tthis.collisionMap = [];\n\t\tthis.updatableMap = [];\n\t\tthis.sceneMap = [];\n\t\tdocument.querySelectorAll('.Collidable').forEach((object)=>{\n\t\t\tobject = CollidableFactory.from(object);\n\t\t\tthis.collisionMap.push(object);\n\t\t\tif(object.updatable){\n\t\t\t\tthis.updatableMap.push(object);\n\t\t\t}\n\t\t\tif(object.solid || object.platform){\n\t\t\t\tthis.sceneMap.push(object);\n\t\t\t}\n\t\t});\n\t}\n\n\tget scroll_x(){\n\t\treturn this._scroll_x;\n\t}\n\tset scroll_x(scroll){\n\t\tthis.x = -scroll;\n\t\tthis._scroll_x = scroll;\n\t}\n\n\tget width (){ return this.tag.clientWidth; }\n\tget height (){ return this.tag.clientHeight; }\n\n\tget x (){ return this.tag.offsetLeft; }\n\tset x (x){\n\t\tx = parseInt(x);\n\t\tif(x != this.x){\n\t\t\t// console.log('x', x, 'velocity_x',  this.velocity_x);\n\t\t\tthis.tag.style.left = x + 'px';\n\t\t}\n\t}\n\n\tget y (){ return this.tag.offsetTop; }\n\tset y (y){\n\t\ty = parseInt(y);\n\t\tif(y != this.y){\n\t\t\t// console.log(y);\n\t\t\tthis.tag.style.top = y + 'px';\n\t\t}\n\t}\n\n}\n\nexport default new Scene();\n","class Stage {\n\tconstructor() {\n\t\tthis.tag = document.querySelector('.Stage');\n\t}\n\n\tget width (){ return this.tag.clientWidth; }\n\tget height (){ return this.tag.clientHeight; }\n}\nexport default new Stage();\n","import Game from \"./Game\";\nimport Scene from './Scene';\nimport Stage from './Stage';\nimport Control from './Control';\n\nvar size = {\n    tile:{ // size of tiles\n        source:{w:16, h:16},\n        target:{w:32, h:32}\n    },\n    tiles:{ // number of tiles\n        target:{w:1, h:1} // this is set dynamically depending on the canvas size\n    },\n    canvas:{w:1, h:1} // the canvas size is read from the actual html\n};\nNumber.prototype.inRange = function (a, b) {\n    var n = +this;\n    return ( n >= a && n <= b );\n};\n\nclass Puppet {\n\n\tconstructor() {\n\t\tthis.tag = document.querySelector('.Puppet');\n\t\tthis.ax=0;\n\t\tthis.ay=0;\n\t\tthis.velocity_x=1;\n\t\tthis.velocity_x_jump=1.2;\n\t\tthis.velocity_y=22;\n\t\tthis.friction=0.8;\n\t\tthis.speed_limit_y=10;\n\n\t\tthis._speedX=0;\n\t\tthis.speedY=0;\n\n\t\tthis.lives=3;\n\n\t\tthis.animation('right');\n\t}\n\n\tanimation = (classe)=>{\n\t\tthis.tag.classList = \"Puppet \"+classe;\n\t}\n\tupdate = ()=>{\n\t\tthis.ax = this.x;\n\t\tthis.ay = this.y;\n\n\t\tif(Control.shift){\n\t\t\tthis.velocity_x=2;\n\t\t\tthis.velocity_x_jump=2.2;\n\t\t}else{\n\t\t\tthis.velocity_x=1;\n\t\t\tthis.velocity_x_jump=1.2;\n\t\t}\n\n\t\t// this.tag.style.backgroundPosition = \"-209px 0\";\n\n\t\tif(!Control.right && !Control.left){\n\t\t\tif (this.speedX < 0) {\n\t\t\t\tthis.animation('left');\n\t\t\t}else{\n\t\t\t\tthis.animation('right');\n\t\t\t}\n\t\t}\n\t\tif (Control.up) {\n\t\t\tif (this.speedX < 0) {\n\t\t\t\tthis.animation('lookup-left');\n\t\t\t}else{\n\t\t\t\tthis.animation('lookup-right');\n\t\t\t}\n\t\t}\n\t\tif(Control.down) {\n\t\t\tif (this.speedX < 0) {\n\t\t\t\tthis.animation('lower-left');\n\t\t\t}else{\n\t\t\t\tthis.animation('lower-right');\n\t\t\t}\n\t\t}\n\t\tif (this.speedY == 0) {\n\t\t\tif (Control.left) {\n\t\t\t\t// if(this.speedX > 0){\n\t\t\t\t// \tconsole.warn('run with SMOKE left');\n\t\t\t\t// }else{\n\t\t\t\t// }\n\t\t\t\tthis.animation('walk-left');\n\t\t\t\tthis.speedX -= this.velocity_x;\n\t\t\t} else if (Control.right) {\n\t\t\t\t// if(this.speedX < 0){\n\t\t\t\t// \tconsole.warn('run with SMOKE right');\n\t\t\t\t// }else{\n\t\t\t\t// }\n\t\t\t\tthis.animation('walk-right');\n\t\t\t\tthis.speedX += this.velocity_x;\n\t\t\t}\n\t\t}else {\n\t\t\tif (Control.left) {\n\t\t\t\tthis.speedX -= this.velocity_x_jump;\n\t\t\t} else if (Control.right) {\n\t\t\t\tthis.speedX += this.velocity_x_jump;\n\t\t\t}\n\t\t}\n\t\tif (Control.a && this.speedY == 0) {\n\t\t\tthis.jump();\n\t\t}\n\n\t\tif(this.speedY < 0){\n\t\t\tif (this.speedX < 0) {\n\t\t\t\tthis.animation('jumping-left');\n\t\t\t}else{\n\t\t\t\tthis.animation('jumping-right');\n\t\t\t}\n\t\t}else if(this.speedY > 0){\n\t\t\tif (this.speedX < 0) {\n\t\t\t\tthis.animation('falling-left');\n\t\t\t}else{\n\t\t\t\tthis.animation('falling-right');\n\t\t\t}\n\t\t}\n\n\n\t\t// apply gravity.\n\t\tthis.speedY += Scene.gravity;\n\t\tif (Math.abs(this.speedY) < 0.1) this.speedY = 0;\n\n\t\t// apply speed limit when falling down\n\t\tif (this.speedY > this.speed_limit_y) {\n\t\t\tthis.speedY = this.speed_limit_y;\n\t\t}\n\n\t\tthis.ax += this.speedX;\n\t\tthis.ay += this.speedY;\n\n\t\t// block on level edge\n\t\tif (this.ax < 0) {\n\t\t\tthis.ax = 0;\n\t\t} else if (this.ax + this.width > Scene.width) {\n\t\t\tthis.ax = Scene.width - this.width;\n\t\t}\n\t\t// die on level bottom\n\t\tif (this.ay > Scene.height) {\n\t\t\tGame.gameOver();\n\t\t}\n\n\t\t// add visible items + actors to collision check\n\t\t// todo: only add visible items\n\t\tScene.collisionMap.forEach((object)=>{\n\t\t\tconst collides = object.collides(this);\n\n\t\t\tobject.collide(this, collides);\n\n\n\t\t\t// if (object.solid) {\n            /* if (collides.top && object.border.top=='solid') {\n                 // if (object.type == 'block_coin') {\n                 //     replaceLevelSpriteXY(object.x, object.y, \"ß\");\n                 //     items.push({ sx:8, sy:9, x:object.x, y:(object.y - size.tile.target.h), type:'coin' });\n                 // } else {\n                     this.ay = object.y + this.height;// + size.tile.target.h;\n                     this.speedY = 1;\n                 // }\n             }\n\t\t\t\t if (collides.bottom && object.border.bottom=='solid') {\n                 // jump on enemy\n                 // if (object.type == 'enemy_mushroom') {\n                 //     object.deadly = false\n                 //     object.speed = 0\n                 //     object.sx = 2\n                 //     score++;\n                 //     sound_jump_on_enemy()\n                 // }\n                 this.ay = object.y - this.height;\n                 this.speedY = 0;\n             }\n\t\t\t\t if (collides.right && object.border.right=='solid') {\n                 this.ax = object.x - this.width;\n                 this.speedX = 0;\n             }\n\t\t\t\t if (collides.left && object.border.left=='solid') {\n                 this.ax = object.x + this.width;//+ size.tile.target.w;\n                 this.speedX = 0;\n             }*/\n         // }else if (object.platform) {\n\t\t\t// \tif (collides.bottom) {\n\t\t\t// \t\tif(this.speedY > 0){\n\t\t\t// \t\t\tthis.ay = object.y - this.height;\n\t\t\t// \t\t\tthis.speedY = 0;\n\t\t\t// \t\t}\n\t\t\t// \t}\n         // }\n\n\t\t\t// const collides = this.checkCollision(object);\n\n\t\t    // apply collision to player movement\n\t\t    // special actions on collisions\n\t\t    // if (object.solid) {\n\t\t    //     if (collides.top) {\n\t\t    //         // if (object.type == 'block_coin') {\n\t\t    //         //     replaceLevelSpriteXY(object.x, object.y, \"ß\");\n\t\t    //         //     items.push({ sx:8, sy:9, x:object.x, y:(object.y - size.tile.target.h), type:'coin' });\n\t\t    //         // } else {\n\t\t\t\t// \t\t// if\n\t\t    //             this.y = object.y-object.height;\n\t\t    //             this.speedY = 0;\n\t\t    //         // }\n\t\t    //     } else if (collides.bottom) {\n\t\t    //         // jump on enemy\n\t\t    //         // if (object.type == 'enemy_mushroom') {\n\t\t    //         //     object.deadly = false\n\t\t    //         //     object.speed = 0\n\t\t    //         //     object.sx = 2\n\t\t    //         //     score++;\n\t\t    //         //     sound_jump_on_enemy()\n\t\t    //         // }\n\t\t\t\t// \t\tthis.y = object.y+object.height;\n\t\t\t\t// \t\tthis.speedY = 0;\n\t\t    //     } else if (collides.right) {\n\t\t    //         this.x = object.x - this.width;\n\t\t    //         this.speedX = 0;\n\t\t    //     } else if (collides.left) {\n\t\t    //         this.x = object.x + size.tile.target.w;\n\t\t    //         this.speedX = 0;\n\t\t    //     }\n\t\t    // }\n\n\t\t   // collide from any side\n\t\t\t//if (collides.top || collides.bottom || collides.right || collides.left) {\n\n\t\t\t//\tobject.collide(this, collides);\n\n\t\t\t//\tif (object.deadly == true) {\n/*\n\n\t\t\t\t\t//items.push({ sx:, sy:9, x:this.x, y:this.y, deadly:false, type:'looser' });\n\t\t\t\t\tGame.newGame();\n\t\t\t\t\tconsole.log('top top');\n\n\t\t\t\t\tif (this.speedX < 0) {\n\t\t\t\t\t\tthis.animation('dying-left');\n\t\t\t\t\t}else{\n\t\t\t\t\t\tthis.animation('dying-right');\n\t\t\t\t\t}\n\n\t\t\t\t\tsetTimeout(()=>{\n\t\t\t\t\t\tGame.gameOver();\n\t\t\t\t\t\tGame.play();\n\t\t\t\t\t}, 1000);*/\n\t\t\t//\t}\n\t\t    //     if (object.type == 'exit') {\n\t\t    //         levelWin()\n\t\t    //     }\n\t\t    //     if (object.type == 'trampoline') {\n\t\t    //         this.speedY < 0 ? this.speedY = 0 : true\n\t\t    //         sound_jump()\n\t\t    //         this.speedY = -0.5 * this.speedY - 25\n\t\t    //     }\n\t\t    //     if (object.type == 'coin') {\n\t\t    //         items.splice(items.indexOf(object), 1)\n\t\t    //         score++\n\t\t    //         sound_coin()\n\t\t    //     }\n\t\t    //}\n\t\t});\n\n\n\n\t  // move the player when the level is at it's border, else move the level\n\t  if (Scene.scroll_x <= 0) {\n         if (this.ax > (Stage.width / 2)) {\n             Scene.scroll_x = 1;\n         }\n     } else if (Scene.scroll_x >= Scene.width - Stage.width && Scene.width > Stage.width) {\n         Scene.scroll_x = Scene.width - Stage.width;\n         if (this.ax < Scene.width - (Stage.width / 2)) {\n             Scene.scroll_x = Scene.width - Stage.width - 1;\n         }\n     } else if (Scene.width > Stage.width) {\n\t\t\tif(this.ax > Scene.line_to_scroll){\n\t\t\t\tScene.scroll_x = this.ax-Scene.line_to_scroll;\n\t\t\t}\n     }\n\n\t  \t// apply friction\n\t\tthis.speedX *= this.friction;\n\n\t\tthis.x = this.ax;\n\t\tthis.y = this.ay;\n\t}\n\n\t// walk = (direction)=>{\n\t// \tthis.speedX += this.velocity_x;\n\t// \tthis.tag.classList.add('walk');\n\t// \tthis.tag.classList.remove('walk-back');\n\t// }\n\t// walkReverse = (direction)=>{\n\t// \tthis.speedX -= this.velocity_x;\n\t// \tthis.tag.classList.remove('walk');\n\t// \tthis.tag.classList.add('walk-back');\n\t// }\n\tjump = ()=>{\n\t\tControl.releaseA();\n\t\tthis.speedY -= this.velocity_y;\n\t}\n\tdie = ()=>{\n\t\tGame.newGame();\n\t\tconsole.log('top top');\n\n\t\tif (this.speedX < 0) {\n\t\t\tthis.animation('dying-left');\n\t\t}else{\n\t\t\tthis.animation('dying-right');\n\t\t}\n\n\t\tsetTimeout(()=>{\n\t\t\tGame.gameOver();\n\t\t\tGame.play();\n\t\t}, 1000);\n\t}\n\tlower = ()=>{\n\n\t}\n\n\n\n\n\t// todo: re-spawn player at the closest 'y' to the left\n\trespawnPlayer = ()=>{\n\t    // if (startpos = getLastLevelSpritePosition('y', this.x)) {\n\t    //     this.x = startpos.x * size.tile.target.w\n\t    //     if (this.x >= Stage.width/2) {\n\t    //         Scene.scroll_x = startpos.x * size.tile.target.w - Stage.width/2\n\t    //     } else {\n\t    //         Scene.scroll_x = 0\n\t    //     }\n\t    //     this.y = (startpos.y + line_offset_y) * size.tile.target.h\n\t    // } else {\n\t\t this.speedX = 0;\n\t\t this.speedY = 0;\n\t\t this.x = 40;\n\t\t this.y = 0;\n\t\t Scene.scroll_x = 0\n\t\t Scene.x = 0\n\t\t this.animation('right');\n\t}\n\n\n\tget x (){ return this.tag.offsetLeft; }\n\tset x (x){\n\t\tx = parseFloat(x.toFixed(1));\n\t\tif(x != this.x){\n\t\t\t// console.log('x', x, 'velocity_x',  this.velocity_x);\n\t\t\tthis.tag.style.left = x + 'px';\n\t\t}\n\t}\n\n\tget y (){ return this.tag.offsetTop; }\n\tset y (y){\n\t\ty = parseFloat(y.toFixed(1));\n\t\tif(y != this.y){\n\t\t\t// console.log(y);\n\t\t\tthis.tag.style.top = y + 'px';\n\t\t}\n\t}\n\tget speedX (){ return this._speedX; }\n\tset speedX (speedx){ this._speedX = parseFloat(speedx.toFixed(1)); }\n\n\tget width (){ return this.tag.offsetWidth; }\n\tget height (){ return this.tag.offsetHeight; }\n}\n\nexport {Puppet as default};\n","import Puppet from './Puppet';\nimport Scene from './Scene';\n\nclass Game {\n\tconstructor(){\n\t\tthis.puppet = new Puppet(this);\n\n\t\tthis.ticks = 0;\n\n\t\tthis.fps = 30;\n\n\t\t// fps measurement\n\t\tthis.filterStrength = 20;\n\t\tthis.frameTime = 0;\n\t\tthis.lastLoop = new Date\n\t\tthis.thisLoop;\n\t}\n\n\tgameLoop = ()=>{\n\t\tthis.puppet.update();\n\n\t\tScene.updatableMap.forEach((object)=>{\n\t\t\tobject.update();\n\t\t});\n\n\t\tthis.ticks++;\n\t\tlet thisFrameTime = (this.thisLoop = new Date) - this.lastLoop;\n\t\tthis.frameTime += (this.thisFrameTime - this.frameTime) / this.filterStrength;\n\t\tthis.lastLoop = this.thisLoop;\n\n\t\t// console.log('fps: '+thisFrameTime);\n\t\t// drawLevel();\n\t\t// updateCharacters();\n\t\t// updateElements();\n\t\t// drawElements();\n\t\t// drawActors();\n\t\t// drawControls();\n\t}\n\n\tnewGame = ()=>{\n\t    window.clearInterval(this.gameInterval);\n\t    // hideMenus()\n\t    // hideControls()\n\t    // // draw initial level for menu background\n\t    // load_level()\n\t    // showStartMenu()\n\t}\n\n\tgameOver = ()=>{\n\t\t//meu\n\t\tconsole.error('dead');\n\t\t// sound_dead()\n\t\tif (--this.puppet.lives > 0) {\n\t\t\tthis.puppet.respawnPlayer()\n\t\t} else {\n\t\t\tdocument.querySelector('.GameOver').style.display=\"flex\";\n\t\t// todo: dying animation\n\t\t// actors = []\n\t\t\t//showGameOver()\n\t\t}\n\t}\n\n\tplay = ()=>{\n\t    // hideMenus();\n\t    // registerControls()\n\t    // initializeLevel()\n\t    // initializeTheme()\n\t    // sound_theme()\n\t    window.clearInterval(this.gameInterval);\n\t    this.gameInterval = setInterval(this.gameLoop, 1000 / this.fps);\n\t}\n\n\trestart = ()=>{\n\t    window.clearInterval(this.gameInterval);\n\t    // initGame()\n\t    // startGame()\n\t}\n}\n\nexport default new Game();\n","import Game from './src/Game';\n\nGame.play();\n"]}